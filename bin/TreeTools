#!/usr/bin/python

import os
import sys
import glob
from subprocess import Popen
from subprocess import PIPE
import struct
import getopt
import gzip

if (len(sys.argv) < 3):
    print "Usage: ", sys.argv[0], "[--bindir=directory] (default is /a/bin/radtreev6/) radtree_command (command options) tree_file"
    sys.exit(1)

args = sys.argv[1:]
optlist, args = getopt.getopt(args, 'x', ['bindir='])


bindirs = ["/usr/local/akamai/bin/radtreev6/", "/usr/local/akamai/bin"]


for o, a in optlist:
    if o in ("-b", "--bindir"):
        if (not os.path.exists(a)):
            print "Cannot find directory", a, " for TreeTools binaries";
            sys.exit(1)
        else:
            bindirs.append(a)


radtree_cmd = " ".join(args)

file_name = args[-1]
if (not os.path.exists(file_name)):
    print "Cannot find file", file_name
    sys.exit(1)
    
supported_types = {}
for bindir in bindirs:
    search_dir = bindir + "/TreeTool*"
    files = glob.glob(search_dir)
    for f in files:
        cmd = "%s typelist" %f
        p = Popen(cmd, shell=True, stdout=PIPE, stderr=PIPE)
        out, err = p.communicate()
        if err == '':
            try:
                typenum = int(out)
                supported_types[typenum] = f
            except:
                continue


# this is very ugly: gzip does not throw an error
# if you open an uncompressed file. It does when you try
# to read it. So we have to wait for the read and try
# to read the file normally if that fails

f_in = gzip.open(file_name, 'rb')
try:
    rad_type =  struct.unpack("H", f_in.read(2))[0]
except IOError: #file is not compressed
    rad_type =  struct.unpack("H", open(file_name, 'rb').read(2))[0] 
try:
    cmd = supported_types[rad_type] + " " + radtree_cmd
    os.system(cmd)
except KeyError:
    print "Could not find supporting TreeTools for type", rad_type
    print "Supported types:"
    print supported_types
    sys.exit(1)
except:
    print "unknown error"
    sys.exit(1)
    

    
